class Tournament
types
public String = Utilities`String;
instance variables
			public teams : set of Team;
			public game: Game;
			public trys: nat1;
			public size: nat1;
operations
		public Tournament: set of Team * nat1 * nat1 ==> Tournament
			Tournament (t,ts,s) == (
			teams :=t;
			trys:=ts;
			size:=s;
			);
			
			public startGame: String * Player * Player ==> ()
			startGame (code,p1,p2) == (
			game := new Game(code,p1.getName(),p2.getName(),trys,size);
			);
			
			
			pure public getTeamNames: () ==> set of  String
			getTeamNames() == (
			dcl temp :set of String := {};
			
			for all t in set teams do
			temp := temp union {t.getName()};
			return temp;
			);
			
			

			public getTeamPoints:  String  ==> nat
			getTeamPoints(n) == (
			for all t in set teams do
			if(t.getName() = n) then
			return t.getPontuacao();
			return -1;
			)
			pre n in set getTeamNames();
			
			
functions
 		 
traces
-- TODO Define Combinatorial Test Traces here
end Tournament