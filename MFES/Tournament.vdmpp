class Tournament
types
public String = Utilities`String;
instance variables
			public teams : map String to Team;			
			public game: Game;
			public trys: nat1;
			public size: nat1;
operations
		public Tournament: map String to Team * nat1 * nat1 ==> Tournament
			Tournament (t,ts,s) == (
			teams :=t;
			trys:=ts;
			size:=s;
			);
			
			public startGame: String * Player * Player ==> ()
			startGame (code,p1,p2) == (
			game := new Game(code,p1.getName(),p2.getName(),trys,size,3);
			);
						
			pure public getTeamNames: () ==> set of  String
			getTeamNames() == (
			return dom teams;
			);			

			public getTeamPoints:  String  ==> nat
			getTeamPoints(n) == (	
			return teams(n).getPontuacao();			
			)
			pre n in set getTeamNames();
			
				public dumpTournamentshipToString : () ==> String
		dumpTournamentshipToString() ==
			return "new Tournament(" ^ teamsToString() ^ "\n " ^ gamesToString() ^ ")";
			
			private teamsToString:() ==> String
			teamsToString () == (
			dcl string :String:= "TeamName";
			for all n in set getTeamNames() do
			string :=  string ^";" ^ n;
			return string;
			);
			
			private gamesToString:() ==> String
			gamesToString () == (
			dcl string :String:= "\nGames;";
			string :=  string ^  game.getCodeMaker().getName() ^";" ^ game.getCodeBreaker().getName() ^"\n";
			string := string ^ "Solution;" ^ game.getSolution() ^"\n Attempts: ";
			return string;
			);
functions
 		 
traces
-- TODO Define Combinatorial Test Traces here
end Tournament