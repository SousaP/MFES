package mastermind;

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sun 27-Nov-2011 by the VDM++ to JAVA Code Generator
// (v8.0 - Mon 09-Jul-2007 09:32:40)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Championship implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=teams KEEP=NO
  private volatile HashSet teams = new HashSet();
// ***** VDMTOOLS END Name=teams

// ***** VDMTOOLS START Name=games KEEP=NO
  private volatile HashSet games = new HashSet();
// ***** VDMTOOLS END Name=games

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=ChampionshipSentinel KEEP=NO
  class ChampionshipSentinel extends Sentinel {

    public final int addGame = 0;

    public final int addTeams = 1;

    public final int getGames = 2;

    public final int getScore = 3;

    public final int getTeams = 4;

    public final int oldMatchups = 5;

    public final int Championship = 6;

    public final int addQuickGame = 7;

    public final int getScoreboard = 8;

    public final int gamesPlayedByTeam = 9;

    public final int getNumberOfTriesWinner = 10;

    public final int nr_functions = 11;


    public ChampionshipSentinel () throws CGException {}


    public ChampionshipSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=ChampionshipSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new ChampionshipSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=Championship KEEP=NO
  public Championship () throws CGException {
    try {

      setSentinel();
      games = new HashSet();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Championship


// ***** VDMTOOLS START Name=Championship KEEP=NO
  public Championship (final HashSet participants) throws CGException {

    try {

      setSentinel();
      games = new HashSet();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    if (!this.pre_Championship(participants).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in Championship");
    teams = (HashSet) UTIL.clone(participants);
  }
// ***** VDMTOOLS END Name=Championship


// ***** VDMTOOLS START Name=pre_Championship KEEP=NO
  public Boolean pre_Championship (final HashSet participants) throws CGException {

    Boolean varRes_2 = null;
    {
      if ((varRes_2 = new Boolean((new Integer(participants.size()).intValue()) >= (new Integer(2).intValue()))).booleanValue()) 
        varRes_2 = new Boolean(new Integer((int) (new Integer(participants.size()).doubleValue() - new Integer(2).doubleValue() * Math.floor(new Integer(participants.size()).doubleValue() / new Integer(2).doubleValue()))).intValue() == new Integer(0).intValue());
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_Championship


// ***** VDMTOOLS START Name=getTeams KEEP=NO
  public HashSet getTeams () throws CGException {

    sentinel.entering(((ChampionshipSentinel) sentinel).getTeams);
    try {
      return teams;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).getTeams);
    }
  }
// ***** VDMTOOLS END Name=getTeams


// ***** VDMTOOLS START Name=getGames KEEP=NO
  public HashSet getGames () throws CGException {

    sentinel.entering(((ChampionshipSentinel) sentinel).getGames);
    try {
      return games;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).getGames);
    }
  }
// ***** VDMTOOLS END Name=getGames


// ***** VDMTOOLS START Name=addQuickGame KEEP=NO
  public Game addQuickGame (final String team1, final String team2) throws CGException {

    if (!this.pre_addQuickGame(team1, team2).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in addQuickGame");
    sentinel.entering(((ChampionshipSentinel) sentinel).addQuickGame);
    try {

      Game g = null;
      HashMap arg_3 = new HashMap();
      String tmpVar2_6 = null;
      tmpVar2_6 = Color.getRandomSequence(Board.attemptLength);
      arg_3 = new HashMap();
      arg_3.put(team1, tmpVar2_6);
      String tmpVar2_9 = null;
      tmpVar2_9 = Color.getRandomSequence(Board.attemptLength);
      arg_3.put(team2, tmpVar2_9);
      g = new Game(arg_3, this);
      games.add(g);
      return (Game) g;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).addQuickGame);
    }
  }
// ***** VDMTOOLS END Name=addQuickGame


// ***** VDMTOOLS START Name=pre_addQuickGame KEEP=NO
  public Boolean pre_addQuickGame (final String team1, final String team2) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    HashSet var1_5 = new HashSet();
    var1_5 = new HashSet();
    var1_5.add(team1);
    var1_5.add(team2);
    var1_4 = new Boolean(teams.containsAll(var1_5));
    {
      if ((varRes_3 = var1_4).booleanValue()) {

        Boolean var2_9 = null;
        HashSet var1_10 = new HashSet();
        var1_10 = new HashSet();
        var1_10.add(team1);
        var1_10.add(team2);
        var2_9 = new Boolean(!oldMatchups().contains(var1_10));
        varRes_3 = var2_9;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_addQuickGame


// ***** VDMTOOLS START Name=addGame KEEP=NO
  public Game addGame (final HashMap teamsSolutions) throws CGException {

    if (!this.pre_addGame(teamsSolutions).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in addGame");
    sentinel.entering(((ChampionshipSentinel) sentinel).addGame);
    try {

      Game g = new Game(teamsSolutions, this);
      games.add(g);
      return (Game) g;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).addGame);
    }
  }
// ***** VDMTOOLS END Name=addGame


// ***** VDMTOOLS START Name=pre_addGame KEEP=NO
  public Boolean pre_addGame (final HashMap teamsSolutions) throws CGException {

    Boolean varRes_2 = null;
    Boolean var1_3 = null;
    Boolean var1_4 = null;
    HashSet var1_5 = new HashSet();
    var1_5.clear();
    var1_5.addAll(teamsSolutions.keySet());
    var1_4 = new Boolean(teams.containsAll(var1_5));
    {
      if ((var1_3 = var1_4).booleanValue()) {

        Boolean var2_8 = null;
        HashSet var1_9 = new HashSet();
        var1_9.clear();
        var1_9.addAll(teamsSolutions.keySet());
        var2_8 = new Boolean(!oldMatchups().contains(var1_9));
        var1_3 = var2_8;
      }
    }
    {
      if ((varRes_2 = var1_3).booleanValue()) {

        Boolean var2_12 = null;
        boolean tmpQuant_13 = true;
        {

          HashSet e_set_19 = new HashSet();
          e_set_19.clear();
          e_set_19.addAll(teamsSolutions.values());
          Vector solution = null;
          {
            for (Iterator enm_22 = e_set_19.iterator(); enm_22.hasNext() && tmpQuant_13; ) {

              Vector elem_21 = (Vector) UTIL.ConvertToList(enm_22.next());
              solution = elem_21;
              if (new Boolean(new Integer(solution.size()).intValue() == Board.attemptLength.intValue()).booleanValue()) {}
              else 
                tmpQuant_13 = false;
            }
          }
        }
        var2_12 = new Boolean(tmpQuant_13);
        varRes_2 = var2_12;
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_addGame


// ***** VDMTOOLS START Name=addTeams KEEP=NO
  public void addTeams (final HashSet newTeams) throws CGException {

    if (!this.pre_addTeams(newTeams).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in addTeams");
    sentinel.entering(((ChampionshipSentinel) sentinel).addTeams);
    try {

      HashSet rhs_2 = new HashSet();
      rhs_2 = (HashSet) teams.clone();
      rhs_2.addAll(newTeams);
      teams = (HashSet) UTIL.clone(rhs_2);
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).addTeams);
    }
  }
// ***** VDMTOOLS END Name=addTeams


// ***** VDMTOOLS START Name=pre_addTeams KEEP=NO
  public Boolean pre_addTeams (final HashSet newTeams) throws CGException {

    Boolean varRes_2 = null;
    Boolean var1_3 = null;
    HashSet var1_4 = new HashSet();
    var1_4 = (HashSet) newTeams.clone();
    var1_4.retainAll(teams);
    var1_3 = new Boolean(UTIL.equals(var1_4, new HashSet()));
    {
      if ((varRes_2 = var1_3).booleanValue()) 
        varRes_2 = new Boolean(new Integer((int) (new Integer(newTeams.size()).doubleValue() - new Integer(2).doubleValue() * Math.floor(new Integer(newTeams.size()).doubleValue() / new Integer(2).doubleValue()))).intValue() == new Integer(0).intValue());
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_addTeams


// ***** VDMTOOLS START Name=getScore KEEP=NO
  public Integer getScore (final String team) throws CGException {

    if (!this.pre_getScore(team).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getScore");
    sentinel.entering(((ChampionshipSentinel) sentinel).getScore);
    try {

      HashSet gamesPlayed = gamesPlayedByTeam(team);
      Integer scoreByWinning = new Integer(0);
      Integer scoreByUndefeated = new Integer(0);
      {

        Vector sq_3 = null;
        sq_3 = getBoardsCrackedByOpponent(gamesPlayed, team);
        Board board = null;
        for (Iterator enm_15 = sq_3.iterator(); enm_15.hasNext(); ) {

          Board elem_4 = (Board) enm_15.next();
          board = (Board) elem_4;
          {

            Integer rhs_11 = null;
            Integer var2_13 = null;
            var2_13 = board.numberOfTriesMade();
            rhs_11 = new Integer(scoreByWinning.intValue() + var2_13.intValue());
            scoreByWinning = UTIL.NumberToInt(UTIL.clone(rhs_11));
          }
        }
      }
      {

        Vector sq_16 = null;
        sq_16 = getBoardsUncrackedByOpponent(gamesPlayed, team);
        Board board = null;
        for (Iterator enm_30 = sq_16.iterator(); enm_30.hasNext(); ) {

          Board elem_17 = (Board) enm_30.next();
          board = (Board) elem_17;
          {

            Integer rhs_24 = null;
            Integer var1_25 = null;
            Integer var2_27 = null;
            var2_27 = board.numberOfTriesMade();
            var1_25 = new Integer(scoreByUndefeated.intValue() + var2_27.intValue());
            rhs_24 = new Integer(var1_25.intValue() + new Integer(1).intValue());
            scoreByUndefeated = UTIL.NumberToInt(UTIL.clone(rhs_24));
          }
        }
      }
      return new Integer(scoreByWinning.intValue() + scoreByUndefeated.intValue());
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).getScore);
    }
  }
// ***** VDMTOOLS END Name=getScore


// ***** VDMTOOLS START Name=pre_getScore KEEP=NO
  public Boolean pre_getScore (final String team) throws CGException {

    Boolean varRes_2 = null;
    varRes_2 = new Boolean(teams.contains(team));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_getScore


// ***** VDMTOOLS START Name=oldMatchups KEEP=NO
  private HashSet oldMatchups () throws CGException {

    sentinel.entering(((ChampionshipSentinel) sentinel).oldMatchups);
    try {

      HashSet rexpr_1 = new HashSet();
      HashSet res_s_2 = new HashSet();
      {

        Game oldGames = null;
        {
          for (Iterator enm_7 = games.iterator(); enm_7.hasNext(); ) {

            Game elem_6 = (Game) enm_7.next();
            oldGames = (Game) elem_6;
            HashSet res_s_3 = new HashSet();
            res_s_3 = oldGames.getParticipantTeams();
            res_s_2.add(res_s_3);
          }
        }
      }
      rexpr_1 = res_s_2;
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).oldMatchups);
    }
  }
// ***** VDMTOOLS END Name=oldMatchups


// ***** VDMTOOLS START Name=gamesPlayedByTeam KEEP=NO
  public HashSet gamesPlayedByTeam (final String team) throws CGException {

    sentinel.entering(((ChampionshipSentinel) sentinel).gamesPlayedByTeam);
    try {

      HashSet rexpr_2 = new HashSet();
      HashSet res_s_3 = new HashSet();
      {

        Game game = null;
        {
          for (Iterator enm_11 = games.iterator(); enm_11.hasNext(); ) {

            Game elem_10 = (Game) enm_11.next();
            game = (Game) elem_10;
            Boolean pred_5 = null;
            HashSet var2_7 = new HashSet();
            var2_7 = game.getParticipantTeams();
            pred_5 = new Boolean(var2_7.contains(team));
            if (pred_5.booleanValue()) {
              res_s_3.add(game);
            }
          }
        }
      }
      rexpr_2 = res_s_3;
      return rexpr_2;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).gamesPlayedByTeam);
    }
  }
// ***** VDMTOOLS END Name=gamesPlayedByTeam


// ***** VDMTOOLS START Name=getNumberOfTriesWinner KEEP=NO
  public Integer getNumberOfTriesWinner () throws CGException {

    if (!this.pre_getNumberOfTriesWinner().booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getNumberOfTriesWinner");
    sentinel.entering(((ChampionshipSentinel) sentinel).getNumberOfTriesWinner);
    try {

      HashMap scoreBoard = getScoreboard();
      Integer rexpr_3 = null;
      HashSet par_4 = new HashSet();
      par_4.clear();
      par_4.addAll(scoreBoard.values());
      rexpr_3 = maximumValue(par_4);
      return rexpr_3;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).getNumberOfTriesWinner);
    }
  }
// ***** VDMTOOLS END Name=getNumberOfTriesWinner


// ***** VDMTOOLS START Name=pre_getNumberOfTriesWinner KEEP=NO
  public Boolean pre_getNumberOfTriesWinner () throws CGException {

    Boolean varRes_1 = null;
    {

      HashMap scoreboard = getScoreboard();
      Integer var1_4 = null;
      HashSet unArg_5 = new HashSet();
      HashMap unArg_6 = new HashMap();
      HashSet var2_8 = new HashSet();
      Integer enum_set_9 = null;
      HashSet par_10 = new HashSet();
      par_10.clear();
      par_10.addAll(scoreboard.values());
      enum_set_9 = maximumValue(par_10);
      var2_8 = new HashSet();
      var2_8.add(enum_set_9);
      unArg_6 = scoreboard;
      {

        HashMap tmpMap_12 = new HashMap();
        HashSet domM_13 = new HashSet();
        domM_13.addAll(unArg_6.keySet());
        Object elm_14;
        for (Iterator bb_15 = domM_13.iterator(); bb_15.hasNext(); ) {

          elm_14 = bb_15.next();
          if (var2_8.contains(unArg_6.get(elm_14))) 
            tmpMap_12.put(elm_14, unArg_6.get(elm_14));
        }
        unArg_6 = tmpMap_12;
      }
      unArg_5.clear();
      unArg_5.addAll(unArg_6.keySet());
      var1_4 = new Integer(unArg_5.size());
      varRes_1 = new Boolean(var1_4.intValue() == new Integer(1).intValue());
    }
    return varRes_1;
  }
// ***** VDMTOOLS END Name=pre_getNumberOfTriesWinner


// ***** VDMTOOLS START Name=getScoreboard KEEP=NO
  public HashMap getScoreboard () throws CGException {

    sentinel.entering(((ChampionshipSentinel) sentinel).getScoreboard);
    try {

      HashMap rexpr_1 = new HashMap();
      HashMap res_m_2 = new HashMap();
      {

        String team = null;
        {
          for (Iterator enm_9 = teams.iterator(); enm_9.hasNext(); ) {

            String elem_8 = UTIL.ConvertToString(enm_9.next());
            team = elem_8;
            res_m_2.put(team, getScore(team));
          }
        }
      }
      rexpr_1 = res_m_2;
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((ChampionshipSentinel) sentinel).getScoreboard);
    }
  }
// ***** VDMTOOLS END Name=getScoreboard


// ***** VDMTOOLS START Name=getBoardsUncrackedByOpponent KEEP=NO
  private Vector getBoardsUncrackedByOpponent (final HashSet games, final String team) throws CGException {

    Vector varRes_3 = null;
    if (new Boolean(UTIL.equals(games, new HashSet())).booleanValue()) 
      varRes_3 = new Vector();
    else {

      HashSet tmpSet_8 = new HashSet();
      tmpSet_8 = games;
      Game game = null;
      boolean succ_10 = false;
      for (Iterator enm_12 = tmpSet_8.iterator(); enm_12.hasNext() && !succ_10; ) {

        Game tmpElem_11 = (Game) enm_12.next();
        succ_10 = true;
        game = (Game) tmpElem_11;
      }
      if (!succ_10) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      {

        Board boardPlayedByOpponent = null;
        boardPlayedByOpponent = (Board) game.getBoardPlayedByOpponent(team);
        Boolean cond_17 = null;
        Boolean var1_18 = null;
        var1_18 = boardPlayedByOpponent.isGameOver();
        {
          if ((cond_17 = var1_18).booleanValue()) {

            Boolean var2_19 = null;
            Boolean unArg_20 = null;
            unArg_20 = boardPlayedByOpponent.isSolutionCracked();
            var2_19 = new Boolean(!unArg_20.booleanValue());
            cond_17 = var2_19;
          }
        }
        if (cond_17.booleanValue()) {

          Vector var1_26 = null;
          var1_26 = new Vector();
          var1_26.add(boardPlayedByOpponent);
          Vector var2_28 = null;
          HashSet par_29 = new HashSet();
          HashSet var2_31 = new HashSet();
          var2_31 = new HashSet();
          var2_31.add(game);
          par_29 = (HashSet) games.clone();
          par_29.removeAll(var2_31);
          var2_28 = getBoardsUncrackedByOpponent(par_29, team);
          varRes_3 = (Vector) var1_26.clone();
          varRes_3.addAll(var2_28);
        }
        else {

          HashSet par_21 = new HashSet();
          HashSet var2_23 = new HashSet();
          var2_23 = new HashSet();
          var2_23.add(game);
          par_21 = (HashSet) games.clone();
          par_21.removeAll(var2_23);
          varRes_3 = getBoardsUncrackedByOpponent(par_21, team);
        }
      }
    }
    if (!this.post_getBoardsUncrackedByOpponent(games, team, varRes_3).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Postcondition failure in getBoardsUncrackedByOpponent");
    return varRes_3;
  }
// ***** VDMTOOLS END Name=getBoardsUncrackedByOpponent


// ***** VDMTOOLS START Name=post_getBoardsUncrackedByOpponent KEEP=NO
  private Boolean post_getBoardsUncrackedByOpponent (final HashSet games, final String team, final Vector RESULT) throws CGException {

    Boolean varRes_4 = null;
    boolean tmpQuant_5 = true;
    {

      HashSet e1_set_12 = new HashSet(RESULT);
      Board board = null;
      {
        for (Iterator enm_14 = e1_set_12.iterator(); enm_14.hasNext() && tmpQuant_5; ) {

          Board elem_13 = (Board) enm_14.next();
          board = (Board) elem_13;
          Boolean pred_6 = null;
          Boolean var1_7 = null;
          var1_7 = board.isGameOver();
          {
            if ((pred_6 = var1_7).booleanValue()) {

              Boolean var2_8 = null;
              Boolean unArg_9 = null;
              unArg_9 = board.isSolutionCracked();
              var2_8 = new Boolean(!unArg_9.booleanValue());
              pred_6 = var2_8;
            }
          }
          if (pred_6.booleanValue()) {}
          else 
            tmpQuant_5 = false;
        }
      }
    }
    varRes_4 = new Boolean(tmpQuant_5);
    return varRes_4;
  }
// ***** VDMTOOLS END Name=post_getBoardsUncrackedByOpponent


// ***** VDMTOOLS START Name=getBoardsCrackedByOpponent KEEP=NO
  private Vector getBoardsCrackedByOpponent (final HashSet games, final String team) throws CGException {

    Vector varRes_3 = null;
    if (new Boolean(UTIL.equals(games, new HashSet())).booleanValue()) 
      varRes_3 = new Vector();
    else {

      HashSet tmpSet_8 = new HashSet();
      tmpSet_8 = games;
      Game game = null;
      boolean succ_10 = false;
      for (Iterator enm_12 = tmpSet_8.iterator(); enm_12.hasNext() && !succ_10; ) {

        Game tmpElem_11 = (Game) enm_12.next();
        succ_10 = true;
        game = (Game) tmpElem_11;
      }
      if (!succ_10) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      {

        Board boardPlayedByOpponent = null;
        boardPlayedByOpponent = (Board) game.getBoardPlayedByOpponent(team);
        Boolean cond_17 = null;
        Boolean var1_18 = null;
        var1_18 = boardPlayedByOpponent.isGameOver();
        {
          if ((cond_17 = var1_18).booleanValue()) {

            Boolean var2_19 = null;
            var2_19 = boardPlayedByOpponent.isSolutionCracked();
            cond_17 = var2_19;
          }
        }
        if (cond_17.booleanValue()) {

          Vector var1_25 = null;
          var1_25 = new Vector();
          var1_25.add(boardPlayedByOpponent);
          Vector var2_27 = null;
          HashSet par_28 = new HashSet();
          HashSet var2_30 = new HashSet();
          var2_30 = new HashSet();
          var2_30.add(game);
          par_28 = (HashSet) games.clone();
          par_28.removeAll(var2_30);
          var2_27 = getBoardsCrackedByOpponent(par_28, team);
          varRes_3 = (Vector) var1_25.clone();
          varRes_3.addAll(var2_27);
        }
        else {

          HashSet par_20 = new HashSet();
          HashSet var2_22 = new HashSet();
          var2_22 = new HashSet();
          var2_22.add(game);
          par_20 = (HashSet) games.clone();
          par_20.removeAll(var2_22);
          varRes_3 = getBoardsCrackedByOpponent(par_20, team);
        }
      }
    }
    if (!this.post_getBoardsCrackedByOpponent(games, team, varRes_3).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Postcondition failure in getBoardsCrackedByOpponent");
    return varRes_3;
  }
// ***** VDMTOOLS END Name=getBoardsCrackedByOpponent


// ***** VDMTOOLS START Name=post_getBoardsCrackedByOpponent KEEP=NO
  private Boolean post_getBoardsCrackedByOpponent (final HashSet games, final String team, final Vector RESULT) throws CGException {

    Boolean varRes_4 = null;
    boolean tmpQuant_5 = true;
    {

      HashSet e1_set_11 = new HashSet(RESULT);
      Board board = null;
      {
        for (Iterator enm_13 = e1_set_11.iterator(); enm_13.hasNext() && tmpQuant_5; ) {

          Board elem_12 = (Board) enm_13.next();
          board = (Board) elem_12;
          Boolean pred_6 = null;
          Boolean var1_7 = null;
          var1_7 = board.isGameOver();
          {
            if ((pred_6 = var1_7).booleanValue()) {

              Boolean var2_8 = null;
              var2_8 = board.isSolutionCracked();
              pred_6 = var2_8;
            }
          }
          if (pred_6.booleanValue()) {}
          else 
            tmpQuant_5 = false;
        }
      }
    }
    varRes_4 = new Boolean(tmpQuant_5);
    return varRes_4;
  }
// ***** VDMTOOLS END Name=post_getBoardsCrackedByOpponent


// ***** VDMTOOLS START Name=maximumValue KEEP=NO
  private Integer maximumValue (final HashSet s) throws CGException {

    Integer varRes_2 = null;
    if (new Boolean(new Integer(s.size()).intValue() == new Integer(1).intValue()).booleanValue()) {

      HashSet tmpSet_23 = new HashSet();
      tmpSet_23 = s;
      Integer x = null;
      boolean succ_25 = false;
      for (Iterator enm_27 = tmpSet_23.iterator(); enm_27.hasNext() && !succ_25; ) {

        Integer tmpElem_26 = UTIL.NumberToInt(enm_27.next());
        succ_25 = true;
        x = tmpElem_26;
      }
      if (!succ_25) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      varRes_2 = x;
    }
    else {

      HashSet tmpSet_8 = new HashSet();
      tmpSet_8 = s;
      Integer x = null;
      boolean succ_10 = false;
      for (Iterator enm_12 = tmpSet_8.iterator(); enm_12.hasNext() && !succ_10; ) {

        Integer tmpElem_11 = UTIL.NumberToInt(enm_12.next());
        succ_10 = true;
        x = tmpElem_11;
      }
      if (!succ_10) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      {

        Integer max = null;
        HashSet par_15 = new HashSet();
        HashSet var2_17 = new HashSet();
        var2_17 = new HashSet();
        var2_17.add(x);
        par_15 = (HashSet) s.clone();
        par_15.removeAll(var2_17);
        max = maximumValue(par_15);
        if (new Boolean((x.intValue()) > (max.intValue())).booleanValue()) 
          varRes_2 = x;
        else 
          varRes_2 = max;
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=maximumValue

}
;
