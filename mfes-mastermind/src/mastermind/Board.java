package mastermind;

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sun 27-Nov-2011 by the VDM++ to JAVA Code Generator
// (v8.0 - Mon 09-Jul-2007 09:32:40)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import java.util.logging.Level;
import java.util.logging.Logger;
import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=solution KEEP=NO
  private volatile Vector solution = null;
// ***** VDMTOOLS END Name=solution

// ***** VDMTOOLS START Name=attempts KEEP=NO
  private volatile Vector attempts = null;
// ***** VDMTOOLS END Name=attempts

// ***** VDMTOOLS START Name=maxAttempts KEEP=NO
  private volatile Integer maxAttempts = null;
// ***** VDMTOOLS END Name=maxAttempts

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int Board_u_u0_u = 0;

    public final int makeAPlay = 1;

    public final int isGameOver = 2;

    public final int getSolution = 3;

    public final int isSolutionCracked = 4;

    public final int numberOfTriesMade = 5;

    public final int numberOfTriesRemaining = 6;

    public final int Board_u_u1_us_un_uColor_u_u_uColor = 7;

    public final int Board_u_u2_us_un_uColor_u_u_uColor_uM = 8;

    public final int calculateRightColorsInRightPlaces = 9;

    public final int calculateRightColorsInWrongPlaces = 10;

    public final int nr_functions = 11;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=attemptLength KEEP=NO
  public static final Integer attemptLength = new Integer(4);
// ***** VDMTOOLS END Name=attemptLength

// ***** VDMTOOLS START Name=maxAttemptsAvailable KEEP=NO
  public static final HashSet maxAttemptsAvailable;
// ***** VDMTOOLS END Name=maxAttemptsAvailable


// ***** VDMTOOLS START Name=static KEEP=NO
  static {

    HashSet maxAttemptsAvailabletemp = new HashSet();
    {
      try {

        HashSet tmpVal_1 = new HashSet();
        tmpVal_1 = new HashSet();
        tmpVal_1.add(new Integer(8));
        tmpVal_1.add(new Integer(10));
        tmpVal_1.add(new Integer(12));
        maxAttemptsAvailabletemp = tmpVal_1;
      }
      catch (Throwable e) {
        System.out.println(e.getMessage());
      }
    }
    maxAttemptsAvailable = maxAttemptsAvailabletemp;
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board (final Vector correctPlay) throws CGException {

    try {

      setSentinel();
      attempts = new Vector();
      maxAttempts = new Integer(12);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    if (!this.pre_Board(correctPlay).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in Board");
    try {

      {

        solution = (Vector) UTIL.ConvertToList(UTIL.clone(correctPlay));
        attempts = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector()));
      }
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=pre_Board KEEP=NO
  public Boolean pre_Board (final Vector correctPlay) throws CGException {
    return new Boolean(new Integer(correctPlay.size()).intValue() == attemptLength.intValue());
  }
// ***** VDMTOOLS END Name=pre_Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {

    try {

      setSentinel();
      attempts = new Vector();
      maxAttempts = new Integer(12);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    try {

      {

        String rhs_1 = null;
        rhs_1 = Color.getRandomSequence(attemptLength);
        solution = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_1));
        attempts = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector()));
      }
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board (final Vector correctPlay, final Integer maxNumberOfTries) throws CGException {

    try {

      setSentinel();
      attempts = new Vector();
      maxAttempts = new Integer(12);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    if (!this.pre_Board(correctPlay, maxNumberOfTries).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in Board");
    try {

      {

        solution = (Vector) UTIL.ConvertToList(UTIL.clone(correctPlay));
        maxAttempts = UTIL.NumberToInt(UTIL.clone(maxNumberOfTries));
      }
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=pre_Board KEEP=NO
  public Boolean pre_Board (final Vector correctPlay, final Integer maxNumberOfTries) throws CGException {

    Boolean varRes_3 = null;
    {
      if ((varRes_3 = new Boolean(new Integer(correctPlay.size()).intValue() == attemptLength.intValue())).booleanValue()) {

        Boolean var2_8 = null;
        var2_8 = new Boolean(maxAttemptsAvailable.contains(maxNumberOfTries));
        varRes_3 = var2_8;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_Board


// ***** VDMTOOLS START Name=numberOfTriesRemaining KEEP=NO
  public Integer numberOfTriesRemaining () throws CGException {

    if (!this.pre_numberOfTriesRemaining().booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in numberOfTriesRemaining");
    sentinel.entering(((BoardSentinel) sentinel).numberOfTriesRemaining);
    try {
      return new Integer(maxAttempts.intValue() - new Integer(attempts.size()).intValue());
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).numberOfTriesRemaining);
    }
  }
// ***** VDMTOOLS END Name=numberOfTriesRemaining


// ***** VDMTOOLS START Name=pre_numberOfTriesRemaining KEEP=NO
  public Boolean pre_numberOfTriesRemaining () throws CGException {
    return new Boolean((new Integer(attempts.size()).intValue()) <= (maxAttempts.intValue()));
  }
// ***** VDMTOOLS END Name=pre_numberOfTriesRemaining


// ***** VDMTOOLS START Name=numberOfTriesMade KEEP=NO
  public Integer numberOfTriesMade () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).numberOfTriesMade);
    try {
      return new Integer(attempts.size());
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).numberOfTriesMade);
    }
  }
// ***** VDMTOOLS END Name=numberOfTriesMade


// ***** VDMTOOLS START Name=makeAPlay KEEP=NO
  public void makeAPlay (final Vector attempt) throws CGException {

    if (!this.pre_makeAPlay(attempt).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in makeAPlay");
    sentinel.entering(((BoardSentinel) sentinel).makeAPlay);
    try {
      attempts.add(attempt);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).makeAPlay);
    }
  }
// ***** VDMTOOLS END Name=makeAPlay


// ***** VDMTOOLS START Name=pre_makeAPlay KEEP=NO
  public Boolean pre_makeAPlay (final Vector attempt) throws CGException {

    Boolean varRes_2 = null;
    {
      if ((varRes_2 = new Boolean(new Integer(attempt.size()).intValue() == attemptLength.intValue())).booleanValue()) 
        varRes_2 = new Boolean(!isGameOver().booleanValue());
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_makeAPlay


// ***** VDMTOOLS START Name=isSolutionCracked KEEP=NO
  public Boolean isSolutionCracked () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).isSolutionCracked);
    try {

      Boolean rexpr_1 = null;
      HashSet var2_3 = new HashSet();
      HashSet set_5 = new HashSet();
      Enumeration enm_6 = attempts.elements();
      while ( enm_6.hasMoreElements())
        set_5.add(enm_6.nextElement());
      var2_3 = set_5;
      rexpr_1 = new Boolean(var2_3.contains(solution));
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).isSolutionCracked);
    }
  }
// ***** VDMTOOLS END Name=isSolutionCracked


// ***** VDMTOOLS START Name=isGameOver KEEP=NO
  public Boolean isGameOver () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).isGameOver);
    try {

      Boolean rexpr_1 = null;
      {
        if (!(rexpr_1 = isSolutionCracked()).booleanValue()) 
          rexpr_1 = new Boolean(new Integer(attempts.size()).intValue() == maxAttempts.intValue());
      }
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).isGameOver);
    }
  }
// ***** VDMTOOLS END Name=isGameOver


// ***** VDMTOOLS START Name=calculateRightColorsInRightPlaces KEEP=NO
  public Integer calculateRightColorsInRightPlaces (final Vector attempt) throws CGException {

    if (!this.pre_calculateRightColorsInRightPlaces(attempt).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in calculateRightColorsInRightPlaces");
    sentinel.entering(((BoardSentinel) sentinel).calculateRightColorsInRightPlaces);
    try {
      return UTIL.NumberToInt(numberOfMatchingElems(attempt, solution));
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).calculateRightColorsInRightPlaces);
    }
  }
// ***** VDMTOOLS END Name=calculateRightColorsInRightPlaces


// ***** VDMTOOLS START Name=pre_calculateRightColorsInRightPlaces KEEP=NO
  public Boolean pre_calculateRightColorsInRightPlaces (final Vector attempt) throws CGException {
    return new Boolean(new Integer(attempt.size()).intValue() == new Integer(solution.size()).intValue());
  }
// ***** VDMTOOLS END Name=pre_calculateRightColorsInRightPlaces


// ***** VDMTOOLS START Name=calculateRightColorsInWrongPlaces KEEP=NO
  public Integer calculateRightColorsInWrongPlaces (final Vector attempt) throws CGException {

    if (!this.pre_calculateRightColorsInWrongPlaces(attempt).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in calculateRightColorsInWrongPlaces");
    sentinel.entering(((BoardSentinel) sentinel).calculateRightColorsInWrongPlaces);
    try {

      Integer temp = new Integer(0);
      {

        Character color = null;
        for (Iterator enm_15 = Color.Colors.iterator(); enm_15.hasNext(); ) {

          Character elem_3 = (Character) enm_15.next();
          color = elem_3;
          {

            Integer rhs_6 = null;
            Integer var2_8 = null;
            var2_8 = UTIL.NumberToInt(Utilities.min(UTIL.NumberToInt(countOccurences(solution, color)), UTIL.NumberToInt(countOccurences(attempt, color))));
            rhs_6 = new Integer(temp.intValue() + var2_8.intValue());
            temp = UTIL.NumberToInt(UTIL.clone(rhs_6));
          }
        }
      }
      return new Integer(temp.intValue() - calculateRightColorsInRightPlaces(attempt).intValue());
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).calculateRightColorsInWrongPlaces);
    }
  }
// ***** VDMTOOLS END Name=calculateRightColorsInWrongPlaces


// ***** VDMTOOLS START Name=pre_calculateRightColorsInWrongPlaces KEEP=NO
  public Boolean pre_calculateRightColorsInWrongPlaces (final Vector attempt) throws CGException {
    return new Boolean(new Integer(attempt.size()).intValue() == new Integer(solution.size()).intValue());
  }
// ***** VDMTOOLS END Name=pre_calculateRightColorsInWrongPlaces


// ***** VDMTOOLS START Name=getSolution KEEP=NO
  public String getSolution () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).getSolution);
    try {
      return UTIL.ConvertToString(solution);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).getSolution);
    }
  }
// ***** VDMTOOLS END Name=getSolution


// ***** VDMTOOLS START Name=numberOfMatchingElems KEEP=NO
  private Integer numberOfMatchingElems (final Vector firstSeq, final Vector secondSeq) throws CGException {

    if (!this.pre_numberOfMatchingElems(firstSeq, secondSeq).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in numberOfMatchingElems");
    Integer varRes_3 = null;
    if (new Boolean(UTIL.equals(firstSeq, new Vector())).booleanValue()) 
      varRes_3 = new Integer(0);
    else 
      if (new Boolean(UTIL.equals((Object) firstSeq.get(0), (Object) secondSeq.get(0))).booleanValue()) 
        varRes_3 = new Integer(new Integer(1).intValue() + UTIL.NumberToInt(numberOfMatchingElems(new Vector(firstSeq.subList(1, firstSeq.size())), new Vector(secondSeq.subList(1, secondSeq.size())))).intValue());
      else 
        varRes_3 = UTIL.NumberToInt(numberOfMatchingElems(new Vector(firstSeq.subList(1, firstSeq.size())), new Vector(secondSeq.subList(1, secondSeq.size()))));
    if (!this.post_numberOfMatchingElems(firstSeq, secondSeq, varRes_3).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Postcondition failure in numberOfMatchingElems");
    return varRes_3;
  }
// ***** VDMTOOLS END Name=numberOfMatchingElems


// ***** VDMTOOLS START Name=pre_numberOfMatchingElems KEEP=NO
  private Boolean pre_numberOfMatchingElems (final Vector firstSeq, final Vector secondSeq) throws CGException {
    return new Boolean(new Integer(firstSeq.size()).intValue() == new Integer(secondSeq.size()).intValue());
  }
// ***** VDMTOOLS END Name=pre_numberOfMatchingElems


// ***** VDMTOOLS START Name=post_numberOfMatchingElems KEEP=NO
  private Boolean post_numberOfMatchingElems (final Vector firstSeq, final Vector secondSeq, final Integer RESULT) throws CGException {

    Boolean varRes_4 = null;
    if (new Boolean(UTIL.equals(firstSeq, new Vector())).booleanValue()) 
      varRes_4 = new Boolean(RESULT.intValue() == new Integer(0).intValue());
    else 
      varRes_4 = new Boolean(true);
    return varRes_4;
  }
// ***** VDMTOOLS END Name=post_numberOfMatchingElems


// ***** VDMTOOLS START Name=countOccurences KEEP=NO
  private Integer countOccurences (final Vector sequence, final Object element) throws CGException {

    Integer varRes_3 = null;
    if (new Boolean(UTIL.equals(sequence, new Vector())).booleanValue()) 
      varRes_3 = new Integer(0);
    else 
      if (new Boolean(UTIL.equals((Object) sequence.get(0), element)).booleanValue()) 
        varRes_3 = new Integer(new Integer(1).intValue() + UTIL.NumberToInt(countOccurences(new Vector(sequence.subList(1, sequence.size())), element)).intValue());
      else 
        varRes_3 = UTIL.NumberToInt(countOccurences(new Vector(sequence.subList(1, sequence.size())), element));
    if (!this.post_countOccurences(sequence, element, varRes_3).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Postcondition failure in countOccurences");
    return varRes_3;
  }
// ***** VDMTOOLS END Name=countOccurences


// ***** VDMTOOLS START Name=post_countOccurences KEEP=NO
  private Boolean post_countOccurences (final Vector sequence, final Object element, final Integer RESULT) throws CGException {

    Boolean varRes_4 = null;
    if (new Boolean(UTIL.equals(sequence, new Vector())).booleanValue()) 
      varRes_4 = new Boolean(RESULT.intValue() == new Integer(0).intValue());
    else 
      varRes_4 = new Boolean(true);
    return varRes_4;
  }
// ***** VDMTOOLS END Name=post_countOccurences

    @Override
  public String toString() {

      String s = "";

      s += "-----------------------------------------------------------------\n";
      s += "\t\t|   Attempt  |\t R | W |\n";

      if(this.attempts.size() == 0)
          s+= "\t Try to crack your opponent's solution\n";
      else {
          
          for(int i = 0; i < this.attempts.size(); i++) {
                try {
                    s += "\t\t|" + this.attempts.get(i) + "|\t "
                            + this.calculateRightColorsInRightPlaces((Vector) this.attempts.get(i))
                            + " | " + this.calculateRightColorsInWrongPlaces((Vector) this.attempts.get(i))
                            + " |\n";
                } catch (CGException ex) {
                    Logger.getLogger(Board.class.getName()).log(Level.SEVERE, null, ex);
                }

          }

      }

      s += "-----------------------------------------------------------------\n";

      return s;

  }

}
;
